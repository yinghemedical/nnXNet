[project]
name = "nnxnet"
version = "0.5.0"
requires-python = ">=3.9"
description = "nnX-Net is an extensible multi-task learning framework for medical imaging"
readme = "readme.md"
license = { file = "LICENSE" }
authors = [
    { name = "Pengcheng Shi", email = "shipc1220@gmail.com"},
    { name = "Medical Image Insights" }
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Healthcare Industry",
    "Programming Language :: Python :: 3",
    "License :: OSI Approved :: Apache Software License",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]
keywords = [
    'deep learning',
    'multi-task learning',
    'medical image segmentation',
    'medical image classification',
    'nnX-Net',
    'nnxnet'
]
dependencies = [
    "torch>=2.1.2",
    "acvl-utils>=0.2,<0.3",  # 0.3 may bring breaking changes. Careful!
    "dynamic-network-architectures>=0.3.1,<0.4",  # 0.3.1 and lower are supported, 0.4 may have breaking changes. Let's be careful here
    "tqdm",
    "dicom2nifti",
    "scipy",
    "batchgenerators>=0.25",
    "numpy",
    "scikit-learn",
    "scikit-image>=0.19.3",
    "SimpleITK>=2.2.1",
    "pandas",
    "graphviz",
    'tifffile',
    'requests',
    "nibabel",
    "matplotlib",
    "seaborn",
    "imagecodecs",
    "yacs"
]

[project.urls]
homepage = "https://github.com/yinghemedical/nnXNet"
repository = "https://github.com/yinghemedical/nnXNet"

[project.scripts]
nnXNet_plan_and_preprocess = "nnxnet.experiment_planning.plan_and_preprocess_entrypoints:plan_and_preprocess_entry"
nnXNet_extract_fingerprint = "nnxnet.experiment_planning.plan_and_preprocess_entrypoints:extract_fingerprint_entry"
nnXNet_plan_experiment = "nnxnet.experiment_planning.plan_and_preprocess_entrypoints:plan_experiment_entry"
nnXNet_preprocess = "nnxnet.experiment_planning.plan_and_preprocess_entrypoints:preprocess_entry"
nnXNet_train = "nnxnet.run.run_training:run_training_entry"
nnXNet_predict_from_modelfolder = "nnxnet.inference.predict_from_raw_data:predict_entry_point_modelfolder"
nnXNet_predict = "nnxnet.inference.predict_from_raw_data:predict_entry_point"
nnXNet_convert_old_nnXNet_dataset = "nnxnet.dataset_conversion.convert_raw_dataset_from_old_nnxnet_format:convert_entry_point"
nnXNet_find_best_configuration = "nnxnet.evaluation.find_best_configuration:find_best_configuration_entry_point"
nnXNet_determine_postprocessing = "nnxnet.postprocessing.remove_connected_components:entry_point_determine_postprocessing_folder"
nnXNet_apply_postprocessing = "nnxnet.postprocessing.remove_connected_components:entry_point_apply_postprocessing"
nnXNet_ensemble = "nnxnet.ensembling.ensemble:entry_point_ensemble_folders"
nnXNet_accumulate_crossval_results = "nnxnet.evaluation.find_best_configuration:accumulate_crossval_results_entry_point"
nnXNet_plot_overlay_pngs = "nnxnet.utilities.overlay_plots:entry_point_generate_overlay"
nnXNet_download_pretrained_model_by_url = "nnxnet.model_sharing.entry_points:download_by_url"
nnXNet_install_pretrained_model_from_zip = "nnxnet.model_sharing.entry_points:install_from_zip_entry_point"
nnXNet_export_model_to_zip = "nnxnet.model_sharing.entry_points:export_pretrained_model_entry"
nnXNet_move_plans_between_datasets = "nnxnet.experiment_planning.plans_for_pretraining.move_plans_between_datasets:entry_point_move_plans_between_datasets"
nnXNet_evaluate_folder = "nnxnet.evaluation.evaluate_predictions:evaluate_folder_entry_point"
nnXNet_evaluate_simple = "nnxnet.evaluation.evaluate_predictions:evaluate_simple_entry_point"
nnXNet_convert_MSD_dataset = "nnxnet.dataset_conversion.convert_MSD_dataset:entry_point"

[build-system]
requires = ["setuptools>=67.8.0"]
build-backend = "setuptools.build_meta"

[tool.codespell]
skip = '.git,*.pdf,*.svg'
